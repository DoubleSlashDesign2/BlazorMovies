@inject IJSRuntime js

<input type="checkbox" @bind="@displayButtons" />


<!-- you can make a reference to the movie item in the list by using cotext -->
<!-- Like below - however I think its better to use bersion 2 below so that it indicates the actual reference item -->
@*<GenericList Lists="MoviesList">
        <ElementTemplate>
            <IndiviualMovie Movie="context" DisplayButtons="displayButtons" DeleteMovie="DeleteMovie" />
        </ElementTemplate>
        <EmptyTemplate>
            you could put something here in the Empty template
        </EmptyTemplate>
        <NullTemplate>
            you could put something here in the null template
        </NullTemplate>
    </GenericList>*@

<GenericList Lists="MoviesList">
    <ElementTemplate Context="movie">
        <IndiviualMovie Movie="movie" DisplayButtons="displayButtons" DeleteMovie="DeleteMovie" />
    </ElementTemplate>
</GenericList>

<ConfirmationComp @ref="confirmation" onCancel="onCancel" onConfirm="onConfirm">
    <div>Do you wish to delete this movie @movieToBeDeleted.Title?</div>
</ConfirmationComp>

@code {
    ConfirmationComp confirmation;
    [Parameter] public List<Movie> MoviesList { get; set; }


    //[Parameter] public RenderFragment ChildContent { get; set; } // if you only have 1 RenderFragement use ChildContent ( its built in )


    bool displayButtons = false;  // show checkbok to be checked(its data bound)

    Movie movieToBeDeleted;


    //-- Invoked using Delegate EventCallback
    //void DeleteMovie(Movie movie)
    private async Task DeleteMovie(Movie movie)
    {

        movieToBeDeleted = movie;
        confirmation.Show();


        // -- this was calling the javascript confirm - now we using the Blazor Component
        ////var confirm = await js.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {movie.Title.ToString()}?");
        //await js.MyFunction("Custom message");
        //var confirm = await js.Confirm($"Are you sure you want to delete {movie.Title.ToString()}?");

        //if (confirm)
        //{
        //    MoviesList.Remove(movie);

        //}
    }


    void onConfirm()
    {
        MoviesList.Remove(movieToBeDeleted);
        movieToBeDeleted = null;
        confirmation.Hide();
    }

    void onCancel()
    {
        confirmation.Hide();
        movieToBeDeleted = null;


    }



    protected override void OnInitialized()
    {
        if (MoviesList == null)
            Console.WriteLine(@"OnInitialized. Movies.Count = {0}", "Movies is null");
        else
            Console.WriteLine(@"OnInitialized. Movies.Count = {0}", MoviesList.Count.ToString());
    }

    protected override void OnParametersSet()
    {
        if (MoviesList == null)
            Console.WriteLine(@"OnParametersSet. Movies.Count = {0}", "Movies is null");
        else
            Console.WriteLine(@"OnParametersSet. Movies.Count = {0}", MoviesList.Count.ToString());
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (MoviesList == null)
            Console.WriteLine(@"OnAfterRender. Movies.Count =  Movies is null firstRender={0}", firstRender);
        else
            Console.WriteLine(@"OnAfterRender. Movies.Count = {0} firstRender={1}", MoviesList.Count, firstRender);
    }

    protected override bool ShouldRender()
    {
        // Yes should re-render every time
        // -- If you set this to no then the Dynamic @razor code will not re-fire again
        return true;
    }



}
